#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 105;
const int INF = 987987987;

int V, E;
vector <pair <char, int>> graph[MAX];

vector<int> dijkstra(int start){
    vector<int> dist(V, INF);
    priority_queue<pair<int, int>> pq;
    dist[start] = 0;
    pq.push({0, start});

    while(!pq.empty()){
        int cost = -pq.top().first;
        int cur = pq.top().second;
        pq.pop();

        for(int i=0;i<graph[cur].size();i++){
            int next = graph[cur][i].first;
            int nextCost = cost + graph[cur][i].second;

            if(nextCost < dist[next]){
                dist[next] = nextCost;
                pq.push({-nextCost, next});
            }
        }
    }
    return dist;
}

int main(){
    scanf("%d %d", &V, &E);

    for(int i=0;i<E;i++){
        int s, e, cost;
        scanf("%d %d %d", &s, &e, &cost);

        graph[s].push_back({e, cost});
        graph[e].push_back({s, cost});
    }

    vector <int> dist = dijkstra(0);

    for(int i=0;i<dist.size();i++){
        printf("%d ", dist[i]);
    }
    return 0;
}
