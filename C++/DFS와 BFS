#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

int n, m, start;
vector <int> graph[100];

void dfs(int x){
    bool visited[100] = {0};
    stack <int> s;
    s.push(x);
    visited[x] = true;
    printf("%d ", x);

    while(!s.empty()){
        int cur = s.top();
        s.pop();

        for(int i=0;i<graph[cur].size();i++){
            int next = graph[cur][i];

            if(!visited[next]){
                printf("%d ", next);
                visited[next] = true;
                s.push(cur);
                s.push(next);
                break;
            }
        }
    }
}

bool visited2[100] = {0};

void dfs2(int x){
    visited2[x] = true;
    printf("%d ", x);

    for(int i=0;i<graph[x].size();i++){
        int next = graph[x][i];

        if(!visited2[next]){
            dfs2(next);
        }
    }
}

void bfs(int x){
    bool visited[100] = {0};
    queue <int> q;
    q.push(x);
    visited[x] = true;

    while(!q.empty()){
        int cur = q.front();
        q.pop();
        printf("%d ", cur);
        
        for(int i=0;i<graph[cur].size();i++){
            int next = graph[cur][i];

            if(!visited[next]){
                visited[next] = true;
                q.push(next);
            }
        }
    }
}

int main(){
    scanf("%d %d %d", &n, &m, &start);

    for(int i=0;i<m;i++){
        int u, v;
        scanf("%d %d", &u,&v);
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    dfs(start); // 스택을 활용한 dfs
    printf("\n");
    
    dfs2(start); // 재귀를 활용한 dfs
    printf("\n");
    
    bfs(start); // 큐를 활용한 bfs
    printf("\n");
    return 0;
}
